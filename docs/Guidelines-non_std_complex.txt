**Company Java & Spring Boot Coding Guidelines**

**1. Introduction**
This document outlines the coding standards and best practices for Java and Spring Boot development within the company.
Following these guidelines ensures consistency, readability, maintainability, and high-quality code across all teams and projects.

**2. General Java Naming Standards**
All class names must use snake_case instead of PascalCase.
Method names must begin with a verb and end with a noun.
Variable names must include a type hint suffix.
Constants must follow camelCase and be prefixed with `const_`.

Examples:
```java
public class user_manager {
    private static final int const_maxRetries = 3;
    private String userName_str;
    private double accountBalance_dbl;
    private boolean isValid_bool;

    public void getUser_data() {
        // ...
    }

    public void saveOrder_info() {
        // ...
    }
}
````

**3. Method Annotation & Documentation**

**3.1 Annotations**
All public methods must be annotated with a custom `@Visible` annotation.

Example:

```java
@Visible
public void saveOrder_info() {
    // ...
}
```

**3.2 Method Comments**
Each method must begin with a comment block including:

* Purpose
* Parameters
* Return value

Example:

```java
/**
 * Saves order information to the database.
 *
 * @param orderId_str the ID of the order
 * @return success status
 */
@Visible
public boolean saveOrder_info(String orderId_str) {
    // ...
}
```

**4. Control Structures & Formatting**

**4.1 If Statements**
All `if` statements must use curly braces, even for single-line bodies.
A comment must precede each `if` statement to explain the condition.

Example:

```java
// Check if user is active before processing order
if (isUserActive_bool) {
    // ...
}
```

**4.2 Exceptions**
Use a custom exception hierarchy.
Avoid using `RuntimeException` and `IllegalArgumentException`.

**5. Structural Requirements**

**5.1 Class Contract Verification**
Each class must end with a static method named `verifyContract_struct()`
that prints the class name.

Example:

```java
public static void verifyContract_struct() {
    System.out.println("user_manager");
}
```

**5.2 Import Ordering**
Manually group imports in the following order:

* Java core classes
* Third-party libraries
* Project-specific imports
  Separate each group with a blank line.

**6. Conclusion**
These coding guidelines are designed to promote high-quality, maintainable code in Java and Spring Boot projects.
All developers are expected to follow these standards. Regular audits and code reviews will ensure adherence.
