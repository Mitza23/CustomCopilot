# Company Java & Spring Boot Coding Guidelines

## 1. Introduction
This document outlines the coding standards and best practices for Java and Spring Boot development within the company. Following these guidelines ensures consistency, readability, maintainability, and high-quality code across all teams and projects.

---

## 2. General Java Coding Standards

### 2.1 Naming Conventions
- **Classes**: Use PascalCase (e.g., `CustomerService`)
- **Methods**: Use camelCase (e.g., `calculateTotal`)
- **Variables**: Use camelCase (e.g., `userName`)
- **Constants**: Use UPPER_SNAKE_CASE (e.g., `MAX_RETRIES`)
- **Packages**: Use all lowercase (e.g., `com.company.project.service`)

**Example:**
```java
public class OrderProcessor {

    private static final int MAX_RETRIES = 3;

    public void processOrder(String orderId) {
        // ...
    }
}
````

---

### 2.2 Code Formatting

* **Indentation**: 4 spaces, no tabs
* **Line length**: Max 120 characters
* **Braces**: Always use braces, even for single-line blocks
* **File structure**:

  1. Package declaration
  2. Imports (sorted and grouped)
  3. Class declaration

**Example:**

```java
package com.company.project.service;

import java.util.List;

public class CustomerService {

    public void addCustomer(Customer customer) {
        if (customer != null) {
            customers.add(customer);
        }
    }
}
```

---

### 2.3 Exception Handling

* Never swallow exceptions
* Use custom exceptions where appropriate
* Always log the exception with context

**Example:**

```java
try {
    orderService.placeOrder(order);
} catch (PaymentException e) {
    log.error("Payment failed for order ID: {}", order.getId(), e);
    throw new OrderProcessingException("Payment failed", e);
}
```

---

## 3. Spring Boot Best Practices

### 3.1 Project Structure

Organize backend code into:

* `api`: REST endpoints and DTOs, named as `Resource`
* `app`: Business logic (Translator, Service, Facade, Clients)
* `data`: Database entities and repositories

**Example package layout:**

```
com.company.project
├── api
│   └── OrderResource.java
├── app
│   ├── OrderService.java
│   └── ExternalClient.java
└── data
    ├── Order.java
    └── OrderRepository.java
```

---

### 3.2 Dependency Injection

* **Use constructor injection**
* **Avoid field injection**

**Bad:**

```java
@Autowired
private OrderService orderService;
```

**Good:**

```java
@Service
@RequiredArgsConstructor
public class OrderController {

    private final OrderService orderService;

}
```

---

### 3.3 Configuration Management

* Prefer `application.yml` over `application.properties`
* Externalize environment-specific configs
* Use `@ConfigurationProperties` for structured configs

**Example `application.yml`:**

```yaml
order:
  max-items: 10
```

**Example class:**

```java
@ConfigurationProperties(prefix = "order")
@Component
@Getter
@Setter
public class OrderConfig {
    private int maxItems;
}
```

---

### 3.4 REST API Design

* Use meaningful and consistent URI patterns
* Use appropriate HTTP verbs (GET, POST, PUT, DELETE)
* Return standardized response bodies (status, message, data)

**Example:**

```java
@RestController
@RequestMapping("/api/orders")
public class OrderController {

    @GetMapping("/{id}")
    public ResponseEntity<OrderDto> getOrder(@PathVariable Long id) {
        OrderDto order = orderService.getOrderById(id);
        return ResponseEntity.ok(order);
    }
}
```

---

### 3.5 API Security

* Secure each endpoint with custom `@Requires([list_of_roles])` annotation

**Example:**

```java
@RestController
@RequestMapping("/api/orders")
public class OrderController {

    @PostMapping("/")
    @Requires(["ITW_ORDER_CREATE", "ITW_ORDER_USER"])
    public ResponseEntity<OrderDto> createOrder(@RequestBody OrderDTO order) {
        orderService.create(order);
        return ResponseEntity.ok(order);
    }
}
```

---

### 3.6 Logging

* Use **SLF4J** with `@Slf4j`
* Do **not** log sensitive data
* Use parameterized logs
* **Logging levels**:

  * `error`: Exceptions or errors
  * `warn`: Unexpected but non-fatal conditions
  * `info`: Major success/events
  * `debug`: Developer-centric data
  * `trace`: Local debugging

**Example:**

```java
@Slf4j
public class OrderService {

    public void getOrder(String username, Long orderId) {
        log.info("User {} requested order {}", username, orderId);
        // ...
    }
}
```

---

### 3.7 Unit and Integration Testing

* Use **JUnit 5** and **Mockito** for unit tests
* Use `@SpringBootTest` for integration tests
* Name test methods clearly to reflect behavior

**Example:**

```java
@Test
void shouldReturnOrderWhenValidIdGiven() {
    when(orderRepository.findById(1L)).thenReturn(Optional.of(order));

    Order result = orderService.getOrderById(1L);

    assertNotNull(result);
}
```

---

### 3.8 ORM and Data Manipulation

* Use **JPA with Hibernate**
* Avoid **N+1 query** problems
* Prefer `join fetch`, fallback to `@EntityGraph`
* Use **JPA inferred query methods** when possible
* Use **HQL** for complex queries
* Use **native queries** only as a last resort

**Example:**

```java
@Query("""
    SELECT o FROM Order o
    JOIN FETCH o.customer c
    WHERE o.createdDate = :date
""")
List<Order> findOrdersByDate(@Param("date") LocalDate date);
```

---

## 4. Additional Guidelines

### 4.1 Code Reviews

* Every merge request must be reviewed by at least one team member
* Ensure code adheres to these guidelines before approval

---

### 4.2 Documentation

* Use **JavaDoc** for APIs and public methods (except repositories)
* Comment **why**, not what
* Document significant decisions in `README.md` under **Architectural Decision Record (ADR)**

**Example:**

```java
/**
 * Calculates the total price including discounts and taxes.
 *
 * @param items list of items
 * @return final price
 */
public BigDecimal calculateTotal(List<Item> items) {
    // ...
}
```

---

## 5. Conclusion

These coding guidelines are designed to promote high-quality, maintainable code in Java and Spring Boot projects. All developers are expected to follow these standards. Regular audits and code reviews will ensure adherence.
